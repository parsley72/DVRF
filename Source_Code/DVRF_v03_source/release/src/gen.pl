#!/usr/bin/perl

# Purpose: Generate some files for compile
# Author: Honor

use strict;

my $DEBUG = 1;

my $CONF = "cy_configure";	## 
my $CONF_MAK = "cy_conf.mak";	## for Makefile
my $CONF_H = "cy_conf.h";	## for C

my $MODEL = ".model";
my $KERNEL = ".kernel";

my $SUPP_C = "router/shared/support.c";	## for WEB
my $SUPP_H = "router/shared/support.h";	## for WEB

my %db=();
my $count =0;

open(FILE_R, $CONF) || die "Cann't open $CONF\n";
open(CONF_MAK, ">.$CONF_MAK") || die "Cann't write $CONF_MAK\n";
open(CONF_H, ">.$CONF_H") || die "Cann't write $CONF_H\n";

open(MODEL, ">$MODEL") || die "Cann't write $MODEL\n";
open(KERNEL, ">$KERNEL") || die "Cann't write $KERNEL\n";

print CONF_MAK "## Automatically generated by gen.pl, don't edit #	<remove the line>\n\n";
print CONF_H "// Automatically generated by gen.pl, don't edit #	<remove the line>\n\n";

#my %support = &load_db();
#for my $su (keys %support){
#	print "Key=[$su] Value=[$support{$su}]\n" if $DEBUG;
#}

my $param = &gen_define();
print CONF_MAK "WEB_PAGE=dvrf\n";
print CONF_MAK "LOCALE=USA\n";
my $model_name = $param->{MODEL_NAME};
#printf "MODEL_NAME = $model_name\n";

my $linksys_model = &check_model();
print MODEL "LINKSYS_MODEL=$linksys_model\n";
print MODEL "MODEL_VERSION=$param->{MODEL_VERSION}\n";
print CONF_MAK "LINKSYS_MODEL=$linksys_model\n";
#&get_hw_ver();

print KERNEL "LINUX_VERSION=$param->{LINUX_VERSION}\n";
print CONF_MAK "LINUX_VERSION=2_6\n";

my $set_disable = 0;

while(my $line=<FILE_R>){
	my $patt;
	my $match;
	my $rule;

	$line =~ s/^\s+//g;
	$line =~ s/\s+$//g;
	if($line  eq "" || $line =~ /^#/){
		next;
	}
	if($line =~ /^if\s*\(/){
		#print CONF_MAK "\nifeq (\$($1),$2)\n";
		$line =~ s/^if//g;
		if ($line =~ /\w+\&\&\w+\|\|/){
			print "We don't support such implement";
			exit;
		}
		elsif ($line =~ /\&\&/){
			$patt = '\&\&';
			$match = 1;
			$rule = 1;
		}
		else{
			$patt = '\|\|';
			$match = 0;
			$rule = 2;
		}
		my @buf = split(/$patt/, $line);
		for(my $i=0 ; $i<=$#buf ; $i++){
			print "[$buf[$i]]\n" if $DEBUG;
			if($buf[$i] =~ /\((\w+)==(\w+)\)/){
				my $val = &get_define($1);
				print "[$1]=[$2] [$val]\n" if $DEBUG;
				if($val eq $2){
					if($rule == 2){
						$match = $match | 1;
					}
					else {
						$match = $match & 1;
					}
				}
				else{
					if($rule == 2){
						$match = $match | 0;
					}
					else {
						$match = $match & 0;
					}
				}
			}

		}
		print "[match=$match]\n" if $DEBUG;
		print CONF_MAK "\nifeq ($match,1)\n";
		print CONF_H "\n#if $match\n";

		$set_disable = "1" if $match == "0";

		next;	
	}
	if($line =~ /^endif/){
		print CONF_MAK "endif\n\n";
		print CONF_H "#endif\n\n";

		$set_disable = "0";		

		next;
	}

	my ($name, $value) = split(/=/, $line);

	printf("%25s   %s\n", $name, $value) if $DEBUG;

	if($name =~ /_SUPPORT$/ ){
		my $n1 = $name;
		$n1 =~ s/_SUPPORT$//g;

		if($set_disable eq "1") {
			$value = "0";
			print "\t\t\t\t(Reset to 0)\n" if $DEBUG;
		}

		if($value eq "1"){
			print CONF_MAK $n1."_SUPPORT=1\n";
			print CONF_H "#define\t".$n1."_SUPPORT"."\t1\n";
			print CONF_MAK "CONFIG_".$n1."=y\n";
			print CONF_H "#define\tCONFIG_".$n1."\ty\n";
			print CONF_H "#define\t__CONFIG_".$n1."__\t1\n";
		}
		elsif((($n1 eq "PARENTAL_CONTROL" || $n1 eq "SPEED_BOOSTER") && $model_name eq "WRT54GS") ||
		       ($n1 eq "SPEED_BOOSTER") && ($model_name eq "WRT54GS-JP")){
			print "\nThe $model_name model always supports ".$n1.", you must set ".$n1."_SUPPORT to 1\n\n";
			exit(-1);
		}
		else{
			print CONF_MAK "#".$n1."_SUPPORT	is not set     <remove the line>\n";
			print CONF_H "//#define\t".$n1."_SUPPORT"."\t0	<remove the line>\n";
			#print CONF_MAK "# CONFIG_".$n1." is not set	<remove the line>\n";
			print CONF_MAK "CONFIG_".$n1."=\n";
			print CONF_H "//#define\tCONFIG_".$n1."\t	<remove the line>\n";
			print CONF_H "#undef\t__CONFIG_".$n1."__\n";
		}
		$db{$name} = $value;
		$count ++;
		next;
	}

	elsif($name =~ /^LOG_/ ){
		my $n1 = $name;
		$n1 =~ s/^LOG_//g;
		if($value eq "0"){
			print CONF_MAK "# $name". " is not set	<remove the line>\n";
			print CONF_H "//#define\t"."$name"."\t"."$value 	<remove the line>\n";
		}
		else{
			print CONF_MAK "$name"."="."$value\n";
			print CONF_H "#define\t"."$name"."\t"."$value\n";
		}
		$db{$name} = $value;
		$count ++;
		next;
	}

	elsif($name =~ /_LOG_NAME$/ ){
		$db{$name} = $value;
		$count ++;
		next;
	}

	elsif($name =~ /_FULL_NAME$/ ){
		$db{$name} = $value;
		$count ++;
		next;
	}

	if($value eq "1" || $value eq "y"){
		print CONF_MAK "$name"."="."$value\n";
		print CONF_H "#define\t"."$name"."\t"."$value\n";
	}
	else{
		print CONF_MAK "# $name". " is not set	<remove the line>\n";
		print CONF_H "//#define\t"."$name"."\t"."$value 	<remove the line>\n";
	}
	$db{$name} = $value;
	$count ++;
}

print CONF_MAK "\nCY_DEPS := \$(SRCBASE)/include/code_pattern\.h \$(SRCBASE)/include/cyutils\.h \$(SRCBASE)/include/cymac\.h \$(SRCBASE)/cy_conf\.h \$(SRCBASE)/cy_conf\.mak Makefile \$(shell find -iname \"\*\.h\")\n";
print CONF_MAK "\nCY_DEPS_ := \$(SRCBASE_)/include/code_pattern\.h \$(SRCBASE_)/include/cyutils\.h \$(SRCBASE_)/include/cymac\.h \$(SRCBASE_)/cy_conf\.h \$(SRCBASE_)/cy_conf\.mak Makefile \$(shell find -iname \"\*\.h\")\n";

close FILE_R;
close CONF_MAK;
close CONF_H;

close MODEL;

if($db{'WIRELESS_SUPPORT'} eq "0") {
	$db{'EOU'} = "0";
	$db{'EZC'} = "0";
	$db{'SPEED_BOOSTER_SUPPORT'} = '0';
	$db{'WL_WDS_SUPPORT'} = '0';
	$db{'WL_STA_SUPPORT'} = '0';
}

&gen_support_file();
&check_file();
&gen_build_secs();

sub check_file
{
## We want to check that if cy_configure is chenged.
## In order to avoid source code re-compiled.

	system "diff -u $CONF_MAK .$CONF_MAK";
	if ( $? != 0 ){
		system "mv .$CONF_MAK $CONF_MAK";
	}
	else{
		system "rm .$CONF_MAK";
	}

	system "diff -u $CONF_H .$CONF_H";
	if ( $? != 0 ){
		system "mv .$CONF_H $CONF_H";
	}
	else{
		system "rm .$CONF_H";
	}
}

sub get_define
{
	my $tmp = "";
	my $pattern = $_[0];

	open(CODE_H, "./include/code_pattern.h") || die "Cann't read code_pattern.h\n";
	print "get_define(): find [$_[0]]\n" if $DEBUG;
	while(my $line1=<CODE_H>){
		$line1 =~ s/^\s+//g;
		$line1 =~ s/\s+$//g;
		if($line1  eq "" || $line1 =~ /^\/\//){
			next;
		}
		if($line1 =~ /^#define\s+$pattern\s+(\w+)/){
			$tmp = $1;
			print "get_define(): find [$_[0]]=[$tmp]\n" if $DEBUG;
			last;
		}
	}
	close CODE_H;
	return $tmp;
}

sub gen_define
{
	#if(!(-f "../tools/gen_define")){
	#	system("gcc -s -Iinclude -o ../tools/gen_define ../tools/src/gen_define.c");
	#}
	my %db=();
	my @conf = `../tools/gen_define`;
	foreach my $conf (@conf) {
		chomp $conf;
		print "conf = [$conf]\n" if $DEBUG;
		$conf =~ s/^\s+//g;
		$conf =~ s/\s+$//g;
	
		next if($conf  eq "");

		my @buf = split(/=/, $conf);

		$db{$buf[0]} = $buf[1];		
	}
	return \%db;
}

sub get_hw_ver
{
	open(CODE_H, "./include/code_pattern.h") || die "Cann't read code_pattern.h\n";
	while(my $line1=<CODE_H>){
		$line1 =~ s/^\s+//g;
		$line1 =~ s/\s+$//g;
		if($line1  eq "" || $line1 =~ /^\/\//){
			next;
		}
		if($line1 =~ /^#define\s+WRT54GV(\d+)/){
			print "get_hw_ver(): find $1\n" if $DEBUG;
			if($1 == 1){
				print CONF_H "#define WRT54GV1X 1\n";
				print CONF_H "//#define WRT54GV2 0\n\n";
				print CONF_MAK "WRT54GV1X=1\n\n";
				print CONF_MAK "PMON_BOOT_SUPPORT=1\n\n";
				print CONF_H "#define PMON_BOOT_SUPPORT 1\n";
				print CONF_H "//#define CFE_BOOT_SUPPORT 0\n\n";
			}
			else{
				print CONF_H "#define WRT54GV2 1\n";
				print CONF_H "//#define WRT54GV1X 0\n\n";
				print CONF_MAK "WRT54GV2=1\n\n";
				print CONF_MAK "CFE_BOOT_SUPPORT=1\n\n";
				print CONF_H "#define CFE_BOOT_SUPPORT 1\n";
				print CONF_H "//#define PMON_BOOT_SUPPORT 0\n\n";
			}
			last;
		}
	}
	close CODE_H;
}

sub load_db
{
	my %db=();

	open(CC, "cy_conf.h") || die "Cann't read cy_conf.h\n";

	while(my $line=<CC>){
		$line =~ s/^\s+//g;
		$line =~ s/\s+$//g;

		next if($line  eq "");
	
		if($line =~ /^#define\s+(\w+)\s+(\d+)/){
			$db{$1} = $2;
		}
		elsif($line =~ /^\/\/#define\s+(\w+)\s+(\d+)/){
			$db{$1} = $2;
		}
	}
	return %db;
}

sub gen_support_file
{
	print "\n\n################################################\n" if $DEBUG;
	print "#####    Generate support.c\n\n" if $DEBUG;
	
	open(SUPP_C, ">$SUPP_C") || die "Cann't write $SUPP_C\n";

	print SUPP_C "// Automatically generated by gen.pl, don't edit #	<remove the line>\n\n";
	print SUPP_C "#include <support.h>\n";
	print SUPP_C "struct support_list supports[] = {\n";
	my $count = 0;

	for my $su (keys %db){
		next if $db{$su} eq "0";
		if($su =~ /_SUPPORT$/){
			printf("%25s   %s\n", $su, $db{$su}) if $DEBUG;
			my $n1 = $su;
			$n1 =~ s/_SUPPORT$//g;
			my $log_name = $n1."_LOG_NAME";
			my $full_name = $n1."_FULL_NAME";
			my $result = sprintf("\t{\"%s\", \t\t\"%s\", \t\t\"%s\", \t\t\"%s\", \t\t\"1\", \"%d\"},\n", $n1, "$db{$log_name}", "$db{$full_name}", $su, $db{"LOG_$n1"});
			print SUPP_C $result;
			$count++;
		}
	}
	my $result = sprintf("\t{\"%s\", \t\t\"\", \t\t\"\", \t\t\"%s_SUPPORT\", \t\t\"1\", \"0\"},\n", $linksys_model, $linksys_model);
	print SUPP_C $result;
	$count++;
	print SUPP_C "};\n";

	close SUPP_C;

	open(SUPP_H, ">$SUPP_H") || die "Cann't write $SUPP_H\n";

	print SUPP_H "// Automatically generated by gen.pl, don't edit #	<remove the line>\n\n";
	print SUPP_H "\nstruct support_list {\n";
	print SUPP_H "\tchar *name;\n";
	print SUPP_H "\tchar *log_name;\n";
	print SUPP_H "\tchar *full_name;\n";
	print SUPP_H "\tchar *supp_name;\n";
	print SUPP_H "\tchar *supp_value;\n";
	print SUPP_H "\tchar *log_level;\n";
	print SUPP_H "};\n";
	print SUPP_H "extern struct support_list supports[];\n";
	print SUPP_H "#define SUPPORT_COUNT $count\n";
	close SUPP_H;
}

sub check_model
{
	open(CODE_H, "./include/code_pattern.h") || die "Cann't read code_pattern.h\n";
	while(my $line1=<CODE_H>){
		$line1 =~ s/^\s+//g;
		$line1 =~ s/\s+$//g;
		if($line1  eq "" || $line1 =~ /^\/\//){
			next;
		}
		if($line1 =~ /^#define\s+OEM\s+(\w+)/){
			if($1 ne "LINKSYS"){
				close CODE_H;
				return "OTHER";
			}		
		}
		if($line1 =~ /^#define\s+LINKSYS_MODEL\s+(\w+)/){
			close CODE_H;
			return $1;
			#return "WRT54GS";	
		}
	}

	#return "WRT54G";
	close CODE_H;
}

sub gen_build_secs
{
	my $build_date = `date "+%b %d %Y"`;
	chop $build_date;

	my $build_time = `date "+%H:%M:%S"`;
	chop $build_time;
	
	my $build_secs = time();

	open(F, ">router/shared/build_date.h") || die "Cann't write router/shared/build_date.h\n";
	
	print F "#define BUILD_DATE \"$build_date\"\n";
	print F "#define BUILD_TIME \"$build_time\"\n";
	print F "#define BUILD_SECS \"$build_secs\"\n";

	close(F);
}
